import { type Cloneable, type NapiModulesCall, type NapiModulesMap, type NativeModulesCall, type NativeModulesMap, type UpdateDataType } from '@lynx-js/web-constants';
export type INapiModulesCall = (name: string, data: any, moduleName: string, lynxView: LynxView, dispatchNapiModules: (data: Cloneable) => void) => Promise<{
    data: unknown;
    transfer?: Transferable[];
}> | {
    data: unknown;
    transfer?: Transferable[];
} | undefined;
/**
 * Based on our experiences, these elements are almost used in all lynx cards.
 */
/**
 * @property {string} url [required] (attribute: "url") The url of the entry of your Lynx card
 * @property {Cloneable} globalProps [optional] (attribute: "global-props") The globalProps value of this Lynx card
 * @property {Cloneable} initData [oprional] (attribute: "init-data") The initial data of this Lynx card
 * @property {Record<string,string>} overrideLynxTagToHTMLTagMap [optional] use this property/attribute to override the lynx tag -> html tag map
 * @property {NativeModulesMap} nativeModulesMap [optional] use to customize NativeModules. key is module-name, value is esm url.
 * @property {NativeModulesCall} onNativeModulesCall [optional] the NativeModules value handler. Arguments will be cached before this property is assigned.
 * @property {"auto" | null} height [optional] (attribute: "height") set it to "auto" for height auto-sizing
 * @property {"auto" | null} width [optional] (attribute: "width") set it to "auto" for width auto-sizing
 * @property {NapiModulesMap} napiModulesMap [optional] the napiModule which is called in lynx-core. key is module-name, value is esm url.
 * @property {INapiModulesCall} onNapiModulesCall [optional] the NapiModule value handler.
 * @property {"false" | "true" | null} injectHeadLinks [optional] @default true set it to "false" to disable injecting the <link href="" ref="stylesheet"> styles into shadowroot
 *
 * @event error lynx card fired an error
 *
 * @example
 * HTML Exmaple
 *
 * Note that you should declarae the size of lynx-view
 *
 * ```html
 * <lynx-view url="https://path/to/main-thread.js" raw-data="{}" global-props="{}" style="height:300px;width:300px">
 * </lynx-view>
 * ```
 *
 * React 19 Example
 * ```jsx
 * <lynx-view url={myLynxCardUrl} rawData={{}} globalProps={{}} style={{height:'300px', width:'300px'}}>
 * </lynx-vew>
 * ```
 */
export declare class LynxView extends HTMLElement {
    #private;
    static lynxViewCount: number;
    static tag: "lynx-view";
    private static observedAttributeAsProperties;
    /**
     * @private
     */
    static observedAttributes: string[];
    /**
     * @public
     * @property the url of lynx view output entry file
     */
    get url(): string | undefined;
    set url(val: string);
    /**
     * @public
     * @property globalProps
     * @default {}
     */
    get globalProps(): Cloneable;
    set globalProps(val: string | Cloneable);
    /**
     * @public
     * @property initData
     * @default {}
     */
    get initData(): Cloneable;
    set initData(val: string | Cloneable);
    /**
     * @public
     * @property
     * @default {page: 'div'}
     */
    get overrideLynxTagToHTMLTagMap(): Record<string, string>;
    set overrideLynxTagToHTMLTagMap(val: string | Record<string, string>);
    /**
     * @param
     * @property
     */
    get onNativeModulesCall(): NativeModulesCall | undefined;
    set onNativeModulesCall(handler: NativeModulesCall);
    /**
     * @public
     * @property nativeModulesMap
     * @default {}
     */
    get nativeModulesMap(): NativeModulesMap | undefined;
    set nativeModulesMap(map: NativeModulesMap);
    /**
     * @param
     * @property napiModulesMap
     * @default {}
     */
    get napiModulesMap(): NapiModulesMap | undefined;
    set napiModulesMap(map: NapiModulesMap);
    /**
     * @param
     * @property
     */
    get onNapiModulesCall(): NapiModulesCall | undefined;
    set onNapiModulesCall(handler: INapiModulesCall);
    /**
     * @public
     * @method
     * update the `__initData` and trigger essential flow
     */
    updateData(data: Cloneable, updateDataType: UpdateDataType, callback?: () => void): void;
    /**
     * @public
     * @method
     * send global events, which can be listened to using the GlobalEventEmitter
     */
    sendGlobalEvent(eventName: string, params: Cloneable[]): void;
    /**
     * @public
     * @method
     * reload the current page
     */
    reload(): void;
    /**
     * @override
     * "false" value will be omitted
     *
     * {@inheritdoc HTMLElement.setAttribute}
     */
    setAttribute(qualifiedName: string, value: string): void;
    /**
     * @private
     */
    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;
    /**
     * @private
     */
    disconnectedCallback(): void;
    /**
     * @private
     */
    connectedCallback(): void;
}
