// Copyright 2023 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
import { createLynxView, } from './createLynxView.js';
import {} from '@lynx-js/web-constants';
import { inShadowRootStyles } from './inShadowRootStyles.js';
/**
 * Based on our experiences, these elements are almost used in all lynx cards.
 */
/**
 * @property {string} url [required] (attribute: "url") The url of the entry of your Lynx card
 * @property {Cloneable} globalProps [optional] (attribute: "global-props") The globalProps value of this Lynx card
 * @property {Cloneable} initData [oprional] (attribute: "init-data") The initial data of this Lynx card
 * @property {Record<string,string>} overrideLynxTagToHTMLTagMap [optional] use this property/attribute to override the lynx tag -> html tag map
 * @property {NativeModulesMap} nativeModulesMap [optional] use to customize NativeModules. key is module-name, value is esm url.
 * @property {NativeModulesCall} onNativeModulesCall [optional] the NativeModules value handler. Arguments will be cached before this property is assigned.
 * @property {"auto" | null} height [optional] (attribute: "height") set it to "auto" for height auto-sizing
 * @property {"auto" | null} width [optional] (attribute: "width") set it to "auto" for width auto-sizing
 * @property {NapiModulesMap} napiModulesMap [optional] the napiModule which is called in lynx-core. key is module-name, value is esm url.
 * @property {INapiModulesCall} onNapiModulesCall [optional] the NapiModule value handler.
 * @property {"false" | "true" | null} injectHeadLinks [optional] @default true set it to "false" to disable injecting the <link href="" ref="stylesheet"> styles into shadowroot
 *
 * @event error lynx card fired an error
 *
 * @example
 * HTML Exmaple
 *
 * Note that you should declarae the size of lynx-view
 *
 * ```html
 * <lynx-view url="https://path/to/main-thread.js" raw-data="{}" global-props="{}" style="height:300px;width:300px">
 * </lynx-view>
 * ```
 *
 * React 19 Example
 * ```jsx
 * <lynx-view url={myLynxCardUrl} rawData={{}} globalProps={{}} style={{height:'300px', width:'300px'}}>
 * </lynx-vew>
 * ```
 */
export class LynxView extends HTMLElement {
    static lynxViewCount = 0;
    static tag = 'lynx-view';
    static observedAttributeAsProperties = [
        'url',
        'global-props',
        'init-data',
    ];
    /**
     * @private
     */
    static observedAttributes = LynxView.observedAttributeAsProperties.map(nm => nm.toLowerCase());
    #instance;
    #url;
    /**
     * @public
     * @property the url of lynx view output entry file
     */
    get url() {
        return this.#url;
    }
    set url(val) {
        this.#url = val;
        this.#render();
    }
    #globalProps = {};
    /**
     * @public
     * @property globalProps
     * @default {}
     */
    get globalProps() {
        return this.#globalProps;
    }
    set globalProps(val) {
        if (typeof val === 'string') {
            this.#globalProps = JSON.parse(val);
        }
        else {
            this.#globalProps = val;
        }
    }
    #initData = {};
    /**
     * @public
     * @property initData
     * @default {}
     */
    get initData() {
        return this.#initData;
    }
    set initData(val) {
        if (typeof val === 'string') {
            this.#initData = JSON.parse(val);
        }
        else {
            this.#initData = val;
        }
    }
    #overrideLynxTagToHTMLTagMap = { 'page': 'div' };
    /**
     * @public
     * @property
     * @default {page: 'div'}
     */
    get overrideLynxTagToHTMLTagMap() {
        return this.#overrideLynxTagToHTMLTagMap;
    }
    set overrideLynxTagToHTMLTagMap(val) {
        if (typeof val === 'string') {
            this.#overrideLynxTagToHTMLTagMap = JSON.parse(val);
        }
        else {
            this.#overrideLynxTagToHTMLTagMap = val;
        }
    }
    #cachedNativeModulesCall = [];
    #onNativeModulesCall;
    /**
     * @param
     * @property
     */
    get onNativeModulesCall() {
        return this.#onNativeModulesCall;
    }
    set onNativeModulesCall(handler) {
        this.#onNativeModulesCall = handler;
        if (this.#cachedNativeModulesCall) {
            for (const callInfo of this.#cachedNativeModulesCall) {
                handler.apply(undefined, callInfo);
            }
        }
    }
    #nativeModulesMap = {};
    /**
     * @public
     * @property nativeModulesMap
     * @default {}
     */
    get nativeModulesMap() {
        return this.#nativeModulesMap;
    }
    set nativeModulesMap(map) {
        this.#nativeModulesMap = map;
    }
    #napiModulesMap = {};
    /**
     * @param
     * @property napiModulesMap
     * @default {}
     */
    get napiModulesMap() {
        return this.#napiModulesMap;
    }
    set napiModulesMap(map) {
        this.#napiModulesMap = map;
    }
    #onNapiModulesCall;
    /**
     * @param
     * @property
     */
    get onNapiModulesCall() {
        return this.#onNapiModulesCall;
    }
    set onNapiModulesCall(handler) {
        this.#onNapiModulesCall = (name, data, moduleName, dispatchNapiModules) => {
            return handler(name, data, moduleName, this, dispatchNapiModules);
        };
    }
    /**
     * @public
     * @method
     * update the `__initData` and trigger essential flow
     */
    updateData(data, updateDataType, callback) {
        this.#instance?.updateData(data, updateDataType, callback);
    }
    /**
     * @public
     * @method
     * send global events, which can be listened to using the GlobalEventEmitter
     */
    sendGlobalEvent(eventName, params) {
        this.#instance?.sendGlobalEvent(eventName, params);
    }
    /**
     * @public
     * @method
     * reload the current page
     */
    reload() {
        this.#render();
    }
    /**
     * @override
     * "false" value will be omitted
     *
     * {@inheritdoc HTMLElement.setAttribute}
     */
    setAttribute(qualifiedName, value) {
        if (value === 'false') {
            this.removeAttribute(qualifiedName);
        }
        else {
            super.setAttribute(qualifiedName, value);
        }
    }
    /**
     * @private
     */
    attributeChangedCallback(name, oldValue, newValue) {
        if (oldValue !== newValue) {
            switch (name) {
                case 'url':
                    this.#url = newValue;
                    break;
                case 'global-props':
                    this.#globalProps = JSON.parse(newValue);
                    break;
                case 'init-data':
                    this.#initData = JSON.parse(newValue);
                    break;
            }
        }
    }
    /**
     * @private
     */
    disconnectedCallback() {
        this.#instance?.dispose();
        this.#instance = undefined;
        if (this.shadowRoot) {
            this.shadowRoot.innerHTML = '';
        }
    }
    /**
     * @private the flag to group all changes into one render operation
     */
    #rendering = false;
    /**
     * @private
     */
    #render() {
        if (!this.#rendering) {
            this.#rendering = true;
            queueMicrotask(() => {
                this.#rendering = false;
                if (this.#instance) {
                    this.disconnectedCallback();
                }
                if (this.#url) {
                    const tagMap = {
                        'page': 'div',
                        'view': 'x-view',
                        'text': 'x-text',
                        'image': 'x-image',
                        'list': 'x-list',
                        'svg': 'x-svg',
                        ...this.overrideLynxTagToHTMLTagMap,
                    };
                    if (!this.shadowRoot) {
                        this.attachShadow({ mode: 'open' });
                    }
                    const lynxView = createLynxView({
                        tagMap,
                        shadowRoot: this.shadowRoot,
                        templateUrl: this.#url,
                        globalProps: this.#globalProps,
                        initData: this.#initData,
                        nativeModulesMap: this.#nativeModulesMap,
                        napiModulesMap: this.#napiModulesMap,
                        callbacks: {
                            nativeModulesCall: (...args) => {
                                if (this.#onNativeModulesCall) {
                                    return this.#onNativeModulesCall(...args);
                                }
                                else if (this.#cachedNativeModulesCall) {
                                    this.#cachedNativeModulesCall.push(args);
                                }
                                else {
                                    this.#cachedNativeModulesCall = [args];
                                }
                            },
                            napiModulesCall: (...args) => {
                                return this.#onNapiModulesCall?.(...args);
                            },
                            onError: () => {
                                this.dispatchEvent(new CustomEvent('error', {}));
                            },
                        },
                    });
                    this.#instance = lynxView;
                    const styleElement = document.createElement('style');
                    this.shadowRoot.append(styleElement);
                    const styleSheet = styleElement.sheet;
                    for (const rule of inShadowRootStyles) {
                        styleSheet.insertRule(rule);
                    }
                    const injectHeadLinks = this.getAttribute('inject-head-links') !== 'false';
                    if (injectHeadLinks) {
                        document.head.querySelectorAll('link[rel="stylesheet"]').forEach((linkElement) => {
                            const href = linkElement.href;
                            styleSheet.insertRule(`@import url("${href}");`);
                        });
                    }
                }
            });
        }
    }
    /**
     * @private
     */
    connectedCallback() {
        this.#render();
    }
}
if (customElements.get(LynxView.tag)) {
    console.warn(`[${LynxView.tag}] has already been defined`);
}
else {
    customElements.define(LynxView.tag, LynxView);
}
//# sourceMappingURL=LynxView.js.map