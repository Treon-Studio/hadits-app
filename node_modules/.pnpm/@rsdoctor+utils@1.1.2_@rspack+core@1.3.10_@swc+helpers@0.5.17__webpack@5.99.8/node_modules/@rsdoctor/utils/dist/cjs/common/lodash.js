"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var lodash_exports = {};
__export(lodash_exports, {
  compact: () => compact,
  isEmpty: () => isEmpty,
  isNil: () => isNil,
  isNumber: () => isNumber,
  isObject: () => isObject,
  isPlainObject: () => isPlainObject,
  isString: () => isString,
  isUndefined: () => isUndefined,
  last: () => last,
  pick: () => pick
});
module.exports = __toCommonJS(lodash_exports);
function isUndefined(value) {
  return typeof value === "undefined";
}
function isNumber(value) {
  return typeof value === "number" && !Number.isNaN(value);
}
function isObject(value) {
  return typeof value === "object" && value !== null;
}
function isEmpty(value) {
  return value == null || // Check for null or undefined
  Array.isArray(value) && value.length === 0 || // Check for empty array
  typeof value === "object" && Object.keys(value).length === 0;
}
function last(array) {
  return array[array.length - 1];
}
function compact(array) {
  return array.filter((item) => item != null || !item);
}
function isNil(value) {
  return value === null || value === void 0;
}
const isPlainObject = (obj) => {
  return obj !== null && typeof obj === "object" && Object.getPrototypeOf(obj) === Object.prototype;
};
const isString = (v) => typeof v === "string" || !!v && typeof v === "object" && !Array.isArray(v) && {}.toString.call(v) === "[object String]";
function pick(obj, keys) {
  const result = {};
  for (let i = 0; i < keys.length; i++) {
    const key = keys[i];
    if (Object.hasOwn(obj, key)) {
      result[key] = obj[key];
    }
  }
  return result;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  compact,
  isEmpty,
  isNil,
  isNumber,
  isObject,
  isPlainObject,
  isString,
  isUndefined,
  last,
  pick
});
