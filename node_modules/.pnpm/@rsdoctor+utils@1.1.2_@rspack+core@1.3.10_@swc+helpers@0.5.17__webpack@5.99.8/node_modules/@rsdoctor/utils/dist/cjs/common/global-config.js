"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var global_config_exports = {};
__export(global_config_exports, {
  getMcpConfigPath: () => getMcpConfigPath,
  writeMcpPort: () => writeMcpPort
});
module.exports = __toCommonJS(global_config_exports);
var import_fs = __toESM(require("fs"));
var import_path = __toESM(require("path"));
var import_os = __toESM(require("os"));
function writeMcpPort(port, builderName) {
  const homeDir = import_os.default.homedir();
  const rsdoctorDir = import_path.default.join(homeDir, ".cache/rsdoctor");
  const mcpPortFilePath = import_path.default.join(rsdoctorDir, "mcp.json");
  if (!import_fs.default.existsSync(rsdoctorDir)) {
    import_fs.default.mkdirSync(rsdoctorDir, { recursive: true });
  }
  let mcpJson = {
    portList: {},
    port: 0
  };
  if (import_fs.default.existsSync(mcpPortFilePath)) {
    mcpJson = JSON.parse(import_fs.default.readFileSync(mcpPortFilePath, "utf8"));
  }
  if (!mcpJson.portList)
    mcpJson.portList = {};
  mcpJson.portList[builderName || "builder"] = port;
  mcpJson.port = port;
  import_fs.default.writeFileSync(mcpPortFilePath, JSON.stringify(mcpJson, null, 2), "utf8");
}
function getMcpConfigPath() {
  const homeDir = import_os.default.homedir();
  const rsdoctorDir = import_path.default.join(homeDir, ".cache/rsdoctor");
  const mcpPortFilePath = import_path.default.join(rsdoctorDir, "mcp.json");
  return mcpPortFilePath;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getMcpConfigPath,
  writeMcpPort
});
