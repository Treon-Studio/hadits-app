import { Parser as AcornParser } from "acorn";
import { importAttributes } from "acorn-import-attributes";
import * as walk from "acorn-walk";
import { asserts } from "./asserts";
import * as utils from "./utils";
const acornParserInternal = AcornParser.extend(importAttributes);
let acornParserExport = AcornParser.extend(importAttributes);
const parser = {
  /** AST iterator */
  walk,
  /**
   * Compile code
   * - Output root node is `Node.Program`
   */
  parse: (input, options) => {
    return acornParserExport.parse(input, options);
  },
  /**
   * Compile the next first expression
   * - The output root node is `Node.ExpressionStatement`
   */
  parseExpressionAt: (input, pos, options) => {
    return acornParserExport.parseExpressionAt(
      input,
      pos,
      options
    );
  },
  /**
   * add plugins for acorn
   */
  extend(...args) {
    acornParserExport = acornParserExport.extend(...args);
    return acornParserExport;
  },
  /** Set of assertions */
  asserts,
  utils,
  /**
   * @internal
   * parser for internal packages
   */
  internal: {
    parse: (input, options) => {
      return acornParserInternal.parse(input, options);
    },
    parseExpressionAt: (input, pos, options) => {
      return acornParserInternal.parseExpressionAt(
        input,
        pos,
        options
      );
    }
  }
};
export {
  parser
};
