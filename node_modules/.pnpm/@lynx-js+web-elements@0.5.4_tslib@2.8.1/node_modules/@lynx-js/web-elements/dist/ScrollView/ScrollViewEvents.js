import { __esDecorate, __runInitializers } from "tslib";
/*
// Copyright 2024 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
*/
import { bindToStyle, genDomGetter, registerAttributeHandler, } from '@lynx-js/web-elements-reactive';
import { commonComponentEventSetting } from '../common/commonEventInitConfiguration.js';
import { bindToIntersectionObserver } from '../common/bindToIntersectionObserver.js';
import { useScrollEnd } from '../common/constants.js';
import { registerEventEnableStatusChangeHandler } from '@lynx-js/web-elements-reactive';
let ScrollViewEvents = (() => {
    let _private_handleScrollUpperThresholdEventEnabled_decorators;
    let _private_handleScrollUpperThresholdEventEnabled_initializers = [];
    let _private_handleScrollUpperThresholdEventEnabled_extraInitializers = [];
    let _private_handleScrollLowerThresholdEventEnabled_decorators;
    let _private_handleScrollLowerThresholdEventEnabled_initializers = [];
    let _private_handleScrollLowerThresholdEventEnabled_extraInitializers = [];
    let _private_updateUpperThreshold_decorators;
    let _private_updateUpperThreshold_initializers = [];
    let _private_updateUpperThreshold_extraInitializers = [];
    let _private_updateLowerThreshold_decorators;
    let _private_updateLowerThreshold_initializers = [];
    let _private_updateLowerThreshold_extraInitializers = [];
    let _private_handleScrollEventEnabled_decorators;
    let _private_handleScrollEventEnabled_initializers = [];
    let _private_handleScrollEventEnabled_extraInitializers = [];
    let _private_handleScrollEndEventEnabled_decorators;
    let _private_handleScrollEndEventEnabled_initializers = [];
    let _private_handleScrollEndEventEnabled_extraInitializers = [];
    return class ScrollViewEvents {
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _private_handleScrollUpperThresholdEventEnabled_decorators = [registerEventEnableStatusChangeHandler('scrolltoupper')];
            _private_handleScrollLowerThresholdEventEnabled_decorators = [registerEventEnableStatusChangeHandler('scrolltolower')];
            _private_updateUpperThreshold_decorators = [registerAttributeHandler('upper-threshold', true)];
            _private_updateLowerThreshold_decorators = [registerAttributeHandler('lower-threshold', true)];
            _private_handleScrollEventEnabled_decorators = [registerEventEnableStatusChangeHandler('lynxscroll')];
            _private_handleScrollEndEventEnabled_decorators = [registerEventEnableStatusChangeHandler('lynxscrollend')];
            __esDecorate(null, null, _private_handleScrollUpperThresholdEventEnabled_decorators, { kind: "field", name: "#handleScrollUpperThresholdEventEnabled", static: false, private: true, access: { has: obj => #handleScrollUpperThresholdEventEnabled in obj, get: obj => obj.#handleScrollUpperThresholdEventEnabled, set: (obj, value) => { obj.#handleScrollUpperThresholdEventEnabled = value; } }, metadata: _metadata }, _private_handleScrollUpperThresholdEventEnabled_initializers, _private_handleScrollUpperThresholdEventEnabled_extraInitializers);
            __esDecorate(null, null, _private_handleScrollLowerThresholdEventEnabled_decorators, { kind: "field", name: "#handleScrollLowerThresholdEventEnabled", static: false, private: true, access: { has: obj => #handleScrollLowerThresholdEventEnabled in obj, get: obj => obj.#handleScrollLowerThresholdEventEnabled, set: (obj, value) => { obj.#handleScrollLowerThresholdEventEnabled = value; } }, metadata: _metadata }, _private_handleScrollLowerThresholdEventEnabled_initializers, _private_handleScrollLowerThresholdEventEnabled_extraInitializers);
            __esDecorate(null, null, _private_updateUpperThreshold_decorators, { kind: "field", name: "#updateUpperThreshold", static: false, private: true, access: { has: obj => #updateUpperThreshold in obj, get: obj => obj.#updateUpperThreshold, set: (obj, value) => { obj.#updateUpperThreshold = value; } }, metadata: _metadata }, _private_updateUpperThreshold_initializers, _private_updateUpperThreshold_extraInitializers);
            __esDecorate(null, null, _private_updateLowerThreshold_decorators, { kind: "field", name: "#updateLowerThreshold", static: false, private: true, access: { has: obj => #updateLowerThreshold in obj, get: obj => obj.#updateLowerThreshold, set: (obj, value) => { obj.#updateLowerThreshold = value; } }, metadata: _metadata }, _private_updateLowerThreshold_initializers, _private_updateLowerThreshold_extraInitializers);
            __esDecorate(null, null, _private_handleScrollEventEnabled_decorators, { kind: "field", name: "#handleScrollEventEnabled", static: false, private: true, access: { has: obj => #handleScrollEventEnabled in obj, get: obj => obj.#handleScrollEventEnabled, set: (obj, value) => { obj.#handleScrollEventEnabled = value; } }, metadata: _metadata }, _private_handleScrollEventEnabled_initializers, _private_handleScrollEventEnabled_extraInitializers);
            __esDecorate(null, null, _private_handleScrollEndEventEnabled_decorators, { kind: "field", name: "#handleScrollEndEventEnabled", static: false, private: true, access: { has: obj => #handleScrollEndEventEnabled in obj, get: obj => obj.#handleScrollEndEventEnabled, set: (obj, value) => { obj.#handleScrollEndEventEnabled = value; } }, metadata: _metadata }, _private_handleScrollEndEventEnabled_initializers, _private_handleScrollEndEventEnabled_extraInitializers);
            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        #dom;
        #debounceScrollForMockingScrollEnd;
        #prevX = 0;
        #prevY = 0;
        constructor(dom) {
            __runInitializers(this, _private_handleScrollEndEventEnabled_extraInitializers);
            this.#dom = dom;
        }
        #getScrollContainer = () => this.#dom;
        #getUpperThresholdObserverDom = genDomGetter(() => this.#dom.shadowRoot, '#upper-threshold-observer');
        #getLowerThresholdObserverDom = genDomGetter(() => this.#dom.shadowRoot, '#lower-threshold-observer');
        #handleObserver = (entries) => {
            const { isIntersecting, target } = entries[0];
            const id = target.id;
            if (isIntersecting) {
                if (id === 'upper-threshold-observer') {
                    this.#dom.dispatchEvent(new CustomEvent('scrolltoupper', {
                        ...commonComponentEventSetting,
                        detail: this.#getScrollDetail(),
                    }));
                }
                else if (id === 'lower-threshold-observer') {
                    this.#dom.dispatchEvent(new CustomEvent('scrolltolower', {
                        ...commonComponentEventSetting,
                        detail: this.#getScrollDetail(),
                    }));
                }
            }
        };
        static observedAttributes = [
            'upper-threshold',
            'lower-threshold',
        ];
        #handleScrollUpperThresholdEventEnabled = __runInitializers(this, _private_handleScrollUpperThresholdEventEnabled_initializers, (enabled) => {
            enabled
                ? this.#dom.setAttribute('x-enable-scrolltoupper-event', '')
                : this.#dom.removeAttribute('x-enable-scrolltoupper-event'); // css needs this;
            this.#updateUpperIntersectionObserver(enabled);
        });
        #updateUpperIntersectionObserver = (__runInitializers(this, _private_handleScrollUpperThresholdEventEnabled_extraInitializers), bindToIntersectionObserver(this.#getScrollContainer, this.#getUpperThresholdObserverDom, this.#handleObserver));
        #handleScrollLowerThresholdEventEnabled = __runInitializers(this, _private_handleScrollLowerThresholdEventEnabled_initializers, (enabled) => {
            enabled
                ? this.#dom.setAttribute('x-enable-scrolltolower-event', '')
                : this.#dom.removeAttribute('x-enable-scrolltolower-event'); // css needs this;
            this.#updateLowerIntersectionObserver(enabled);
        });
        #updateLowerIntersectionObserver = (__runInitializers(this, _private_handleScrollLowerThresholdEventEnabled_extraInitializers), bindToIntersectionObserver(this.#getScrollContainer, this.#getLowerThresholdObserverDom, this.#handleObserver));
        #updateUpperThreshold = __runInitializers(this, _private_updateUpperThreshold_initializers, bindToStyle(this.#getUpperThresholdObserverDom, 'flex-basis', (v) => `${parseInt(v)}px`));
        #updateLowerThreshold = (__runInitializers(this, _private_updateUpperThreshold_extraInitializers), __runInitializers(this, _private_updateLowerThreshold_initializers, bindToStyle(this.#getLowerThresholdObserverDom, 'flex-basis', (v) => `${parseInt(v)}px`)));
        #getScrollDetail() {
            let { scrollTop, scrollLeft, scrollHeight, scrollWidth } = this
                .#getScrollContainer();
            if (scrollTop === 0) {
                scrollTop -= this.#dom.scrollHeight / 2 - this.#dom.scrollTop;
            }
            if (scrollLeft === 0) {
                scrollLeft -= this.#dom.scrollWidth / 2 - this.#dom.scrollLeft;
            }
            const detail = {
                scrollTop,
                scrollLeft,
                scrollHeight,
                scrollWidth,
                isDragging: false,
                deltaX: scrollLeft - this.#prevX,
                deltaY: scrollTop - this.#prevY,
            };
            this.#prevX = scrollLeft;
            this.#prevY = scrollTop;
            return detail;
        }
        #handleScroll = (__runInitializers(this, _private_updateLowerThreshold_extraInitializers), () => {
            if (this.#scrollEndEventEnabled && !useScrollEnd) {
                // debounce
                clearTimeout(this.#debounceScrollForMockingScrollEnd);
                this.#debounceScrollForMockingScrollEnd = setTimeout(() => {
                    this.#handleScrollEnd();
                }, 100);
            }
            this.#dom.dispatchEvent(new CustomEvent('lynxscroll', {
                ...commonComponentEventSetting,
                detail: this.#getScrollDetail(),
            }));
        });
        #handleScrollEnd = () => {
            this.#dom.dispatchEvent(new CustomEvent('lynxscrollend', {
                ...commonComponentEventSetting,
                detail: this.#getScrollDetail(),
            }));
        };
        #scrollEventEnabled = false;
        #handleScrollEventEnabled = __runInitializers(this, _private_handleScrollEventEnabled_initializers, (enabled) => {
            this.#scrollEventEnabled = enabled;
            this.#handleScrollEventsSwitches();
        });
        #scrollEndEventEnabled = (__runInitializers(this, _private_handleScrollEventEnabled_extraInitializers), false);
        #handleScrollEndEventEnabled = __runInitializers(this, _private_handleScrollEndEventEnabled_initializers, (enabled) => {
            this.#scrollEndEventEnabled = enabled;
            this.#handleScrollEventsSwitches();
        });
        #handleScrollEventsSwitches() {
            if (this.#scrollEventEnabled || this.#scrollEndEventEnabled) {
                this.#getScrollContainer().addEventListener('scroll', this.#handleScroll);
                this.#getScrollContainer().addEventListener('scrollend', this.#handleScrollEnd);
                this.#dom.addEventListener('scroll', this.#handleScroll);
                this.#dom.addEventListener('scrollend', this.#handleScrollEnd);
                this.#prevX = 0;
                this.#prevY = 0;
            }
            else {
                this.#dom.removeEventListener('scroll', this.#handleScroll);
                this.#dom.removeEventListener('scrollend', this.#handleScrollEnd);
            }
        }
        connectedCallback() { }
        dispose() { }
    };
})();
export { ScrollViewEvents };
//# sourceMappingURL=ScrollViewEvents.js.map