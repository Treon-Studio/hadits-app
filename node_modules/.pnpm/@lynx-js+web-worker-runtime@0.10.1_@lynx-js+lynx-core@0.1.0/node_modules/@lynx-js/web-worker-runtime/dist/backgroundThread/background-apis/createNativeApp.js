import { callLepusMethodEndpoint, setNativePropsEndpoint, triggerComponentEventEndpoint, selectComponentEndpoint, } from '@lynx-js/web-constants';
import { createInvokeUIMethod } from './crossThreadHandlers/createInvokeUIMethod.js';
import { registerOnLifecycleEventHandler } from './crossThreadHandlers/registerOnLifecycleEventHandler.js';
import { registerPublicComponentEventHandler } from './crossThreadHandlers/registerPublicComponentEventHandler.js';
import { registerGlobalExposureEventHandler } from './crossThreadHandlers/registerGlobalExposureEventHandler.js';
import { createNativeModules } from './createNativeModules.js';
import { registerUpdateDataHandler } from './crossThreadHandlers/registerUpdateDataHandler.js';
import { registerPublishEventHandler } from './crossThreadHandlers/registerPublishEventHandler.js';
import { createPerformanceApis } from './createPerformanceApis.js';
import { registerOnNativeAppReadyHandler } from './crossThreadHandlers/registerOnNativeAppReadyHandler.js';
import { registerSendGlobalEventHandler } from './crossThreadHandlers/registerSendGlobalEvent.js';
import { createJSObjectDestructionObserver } from './crossThreadHandlers/createJSObjectDestructionObserver.js';
let nativeAppCount = 0;
export async function createNativeApp(config) {
    const { mainThreadRpc, uiThreadRpc, template, nativeModulesMap, timingSystem, } = config;
    const performanceApis = createPerformanceApis(timingSystem);
    const callLepusMethod = mainThreadRpc.createCallbackify(callLepusMethodEndpoint, 2);
    const setNativeProps = uiThreadRpc.createCall(setNativePropsEndpoint);
    const triggerComponentEvent = uiThreadRpc.createCall(triggerComponentEventEndpoint);
    const selectComponent = uiThreadRpc.createCallbackify(selectComponentEndpoint, 3);
    const nativeApp = {
        id: (nativeAppCount++).toString(),
        ...performanceApis,
        setTimeout: setTimeout,
        setInterval: setInterval,
        clearTimeout: clearTimeout,
        clearInterval: clearInterval,
        nativeModuleProxy: await createNativeModules(uiThreadRpc, mainThreadRpc, nativeModulesMap),
        loadScriptAsync: function (sourceURL, callback) {
            const mainfestUrl = template.manifest[`/${sourceURL}`];
            if (mainfestUrl)
                sourceURL = mainfestUrl;
            import(
            /* webpackIgnore: true */
            sourceURL).catch(callback).then(async () => {
                callback(null, {
                    init: (lynxCoreInject) => {
                        lynxCoreInject.tt.lynxCoreInject = lynxCoreInject;
                        lynxCoreInject.tt.globalThis ??= lynxCoreInject;
                        const entry = globalThis.module.exports;
                        const ret = entry?.(lynxCoreInject.tt);
                        return ret;
                    },
                });
            });
        },
        loadScript: (sourceURL) => {
            const mainfestUrl = template.manifest[`/${sourceURL}`];
            if (mainfestUrl)
                sourceURL = mainfestUrl;
            importScripts(sourceURL);
            const entry = globalThis.module.exports;
            return {
                init: (lynxCoreInject) => {
                    return entry?.(lynxCoreInject.tt);
                },
            };
        },
        requestAnimationFrame(cb) {
            return requestAnimationFrame(cb);
        },
        cancelAnimationFrame(handler) {
            return cancelAnimationFrame(handler);
        },
        callLepusMethod,
        setNativeProps,
        invokeUIMethod: createInvokeUIMethod(uiThreadRpc),
        setCard(tt) {
            registerOnLifecycleEventHandler(mainThreadRpc, tt);
            registerPublicComponentEventHandler(mainThreadRpc, tt);
            registerPublishEventHandler(mainThreadRpc, tt);
            registerGlobalExposureEventHandler(mainThreadRpc, tt);
            registerUpdateDataHandler(uiThreadRpc, tt);
            registerOnNativeAppReadyHandler(uiThreadRpc, tt);
            registerSendGlobalEventHandler(uiThreadRpc, tt);
            timingSystem.registerGlobalEmitter(tt.GlobalEventEmitter);
        },
        triggerComponentEvent,
        selectComponent,
        createJSObjectDestructionObserver: createJSObjectDestructionObserver(),
    };
    return nativeApp;
}
//# sourceMappingURL=createNativeApp.js.map