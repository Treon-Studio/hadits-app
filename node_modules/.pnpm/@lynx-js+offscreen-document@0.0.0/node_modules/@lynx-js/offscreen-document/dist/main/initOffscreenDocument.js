// Copyright 2023 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
import { OperationType, } from '../types/ElementOperation.js';
function emptyHandler() {
    // no-op
}
const otherPropertyNames = [
    'detail',
    'keyCode',
    'charCode',
    'elapsedTime',
    'propertyName',
    'pseudoElement',
    'animationName',
];
export function initOffscreenDocument(options) {
    const { shadowRoot, onEvent } = options;
    const enabledEvents = new Set();
    const uniqueIdToElement = [new WeakRef(shadowRoot)];
    const elementToUniqueId = new WeakMap();
    function _getElement(uniqueId) {
        const element = uniqueIdToElement[uniqueId]?.deref();
        if (element) {
            return element;
        }
        else {
            throw new Error(`[lynx-web] cannot find element with uniqueId: ${uniqueId}`);
        }
    }
    function _eventHandler(ev) {
        if (ev.eventPhase !== Event.CAPTURING_PHASE && ev.currentTarget !== shadowRoot) {
            return;
        }
        const target = ev.target;
        if (target && elementToUniqueId.has(target)) {
            const targetUniqueId = elementToUniqueId.get(target);
            const eventType = ev.type;
            const otherProperties = {};
            for (const propertyName of otherPropertyNames) {
                if (propertyName in ev) {
                    otherProperties[propertyName] = ev[propertyName];
                }
            }
            onEvent(eventType, targetUniqueId, ev.bubbles, otherProperties);
        }
    }
    function decodeOperation(operations) {
        for (const op of operations) {
            if (op.type === OperationType.CreateElement) {
                const element = document.createElement(op.tag);
                uniqueIdToElement[op.uid] = new WeakRef(element);
                elementToUniqueId.set(element, op.uid);
            }
            else {
                const target = _getElement(op.uid);
                switch (op.type) {
                    case OperationType.SetAttribute:
                        target.setAttribute(op.key, op.value);
                        break;
                    case OperationType.RemoveAttribute:
                        target.removeAttribute(op.key);
                        break;
                    case OperationType.Append:
                        {
                            const children = op.cid.map(id => _getElement(id));
                            target.append(...children);
                        }
                        break;
                    case OperationType.Remove:
                        target.remove();
                        break;
                    case OperationType.ReplaceWith:
                        const newChildren = op.nid.map(id => _getElement(id));
                        target.replaceWith(...newChildren);
                        break;
                    case OperationType.InsertBefore:
                        {
                            const kid = _getElement(op.cid);
                            const ref = op.ref ? _getElement(op.ref) : null;
                            target.insertBefore(kid, ref);
                        }
                        break;
                    case OperationType.EnableEvent:
                        target.addEventListener(op.eventType, emptyHandler, { passive: true });
                        if (!enabledEvents.has(op.eventType)) {
                            shadowRoot.addEventListener(op.eventType, _eventHandler, { passive: true, capture: true });
                            enabledEvents.add(op.eventType);
                        }
                        break;
                    case OperationType.RemoveChild:
                        {
                            const kid = _getElement(op.cid);
                            target.removeChild(kid);
                        }
                        break;
                    case OperationType.StyleDeclarationSetProperty:
                        {
                            target.style.setProperty(op.property, op.value, op.priority);
                        }
                        break;
                    case OperationType.StyleDeclarationRemoveProperty:
                        {
                            target.style.removeProperty(op.property);
                        }
                        break;
                    case OperationType.SetInnerHTML:
                        target.innerHTML = op.text;
                        break;
                }
            }
        }
    }
    return {
        decodeOperation,
    };
}
//# sourceMappingURL=initOffscreenDocument.js.map