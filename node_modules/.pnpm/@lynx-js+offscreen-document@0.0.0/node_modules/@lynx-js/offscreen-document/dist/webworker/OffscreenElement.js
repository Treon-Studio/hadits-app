// Copyright 2023 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
import { enableEvent, operations, } from './OffscreenDocument.js';
import { OffscreenCSSStyleDeclaration } from './OffscreenCSSStyleDeclaration.js';
import { OperationType } from '../types/ElementOperation.js';
import { OffscreenNode, uniqueId } from './OffscreenNode.js';
export const ancestorDocument = Symbol('ancestorDocument');
const _style = Symbol('_style');
const _attributes = Symbol('_attributes');
export class OffscreenElement extends OffscreenNode {
    [_style];
    [_attributes] = {};
    /**
     * @private
     */
    [ancestorDocument];
    tagName;
    constructor(tagName, parentDocument, elementUniqueId) {
        super(elementUniqueId, parentDocument[enableEvent]);
        this.tagName = tagName.toUpperCase();
        this[ancestorDocument] = parentDocument;
    }
    get style() {
        if (!this[_style]) {
            this[_style] = new OffscreenCSSStyleDeclaration(this);
        }
        return this[_style];
    }
    get id() {
        return this[_attributes]['id'] ?? '';
    }
    set id(value) {
        this[_attributes]['id'] = value;
        this.setAttribute('id', value);
    }
    get className() {
        return this[_attributes]['class'] ?? '';
    }
    setAttribute(qualifiedName, value) {
        this[_attributes][qualifiedName] = value;
        this[ancestorDocument][operations].push({
            type: OperationType.SetAttribute,
            uid: this[uniqueId],
            key: qualifiedName,
            value,
        });
    }
    getAttribute(qualifiedName) {
        return this[_attributes][qualifiedName] ?? null;
    }
    removeAttribute(qualifiedName) {
        delete this[_attributes][qualifiedName];
        this[ancestorDocument][operations].push({
            type: OperationType.RemoveAttribute,
            uid: this[uniqueId],
            key: qualifiedName,
        });
    }
    append(...nodes) {
        this[ancestorDocument][operations].push({
            type: OperationType.Append,
            uid: this[uniqueId],
            cid: nodes.map(node => node[uniqueId]),
        });
        super.append(...nodes);
    }
    replaceWith(...nodes) {
        this[ancestorDocument][operations].push({
            type: OperationType.ReplaceWith,
            uid: this[uniqueId],
            nid: nodes.map(node => node[uniqueId]),
        });
        return super.replaceWith(...nodes);
    }
    getAttributeNames() {
        return Object.keys(this[_attributes]);
    }
    remove() {
        if (this.parentElement) {
            this[ancestorDocument][operations].push({
                type: OperationType.Remove,
                uid: this[uniqueId],
            });
            super._remove();
        }
    }
    insertBefore(newNode, refNode) {
        const ret = super.insertBefore(newNode, refNode);
        this[ancestorDocument][operations].push({
            type: OperationType.InsertBefore,
            uid: this[uniqueId],
            cid: newNode[uniqueId],
            ref: refNode?.[uniqueId],
        });
        return ret;
    }
    removeChild(child) {
        const ret = super.removeChild(child);
        this[ancestorDocument][operations].push({
            type: OperationType.RemoveChild,
            uid: this[uniqueId],
            cid: child[uniqueId],
        });
        return ret;
    }
    set innerHTML(text) {
        this[ancestorDocument][operations].push({
            type: OperationType.SetInnerHTML,
            text,
            uid: this[uniqueId],
        });
    }
}
//# sourceMappingURL=OffscreenElement.js.map