import { type ElementOperation } from '../types/ElementOperation.js';
import { OffscreenElement } from './OffscreenElement.js';
import { OffscreenNode } from './OffscreenNode.js';
export declare const operations: unique symbol;
export declare const enableEvent: unique symbol;
export declare const getElementByUniqueId: unique symbol;
export declare const _onEvent: unique symbol;
declare const _uniqueIdInc: unique symbol;
declare const _uniqueIdToElement: unique symbol;
export declare class OffscreenDocument extends OffscreenNode {
    private _callbacks;
    /**
     * @private
     */
    [_uniqueIdInc]: number;
    /**
     * @private
     */
    [_uniqueIdToElement]: WeakRef<OffscreenElement>[];
    /**
     * @private
     */
    [operations]: ElementOperation[];
    /**
     * @private
     * @param uniqueId
     * @returns
     */
    [getElementByUniqueId](uniqueId: number): OffscreenElement | undefined;
    [enableEvent]: (eventType: string, uid: number) => void;
    constructor(_callbacks: {
        onCommit: (operations: ElementOperation[]) => void;
    });
    commit(): void;
    append(element: OffscreenElement): void;
    createElement(tagName: string): OffscreenElement;
    [_onEvent]: (eventType: string, targetUniqueId: number, bubbles: boolean, otherProperties: Parameters<typeof structuredClone>[0]) => void;
}
export {};
