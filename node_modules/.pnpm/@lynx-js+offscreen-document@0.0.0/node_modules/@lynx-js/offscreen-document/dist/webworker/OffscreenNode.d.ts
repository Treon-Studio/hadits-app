export declare const uniqueId: unique symbol;
export declare const ancestorDocument: unique symbol;
export declare class OffscreenNode extends EventTarget {
    private _enableEvent;
    private _parentElement;
    private readonly _children;
    /**
     * @private
     */
    readonly [uniqueId]: number;
    constructor(elementUniqueId: number, _enableEvent: (eventName: string, uid: number) => void);
    get children(): OffscreenNode[];
    get parentElement(): OffscreenNode | null;
    get firstElementChild(): OffscreenNode | null;
    get lastElementChild(): OffscreenNode | null;
    get nextElementSibling(): OffscreenNode | null;
    append(...nodes: (OffscreenNode)[]): void;
    replaceWith(...nodes: (OffscreenNode)[]): void;
    protected _remove(): void;
    insertBefore(newNode: OffscreenNode, refNode: OffscreenNode | null): OffscreenNode;
    removeChild(child: OffscreenNode | null): OffscreenNode;
    addEventListener(type: string, callback: EventListenerOrEventListenerObject | null, options?: AddEventListenerOptions | boolean): void;
}
