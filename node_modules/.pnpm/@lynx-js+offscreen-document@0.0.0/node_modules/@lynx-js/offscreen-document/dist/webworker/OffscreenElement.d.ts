import { type OffscreenDocument } from './OffscreenDocument.js';
import { OffscreenCSSStyleDeclaration } from './OffscreenCSSStyleDeclaration.js';
import { OffscreenNode } from './OffscreenNode.js';
export declare const ancestorDocument: unique symbol;
declare const _style: unique symbol;
declare const _attributes: unique symbol;
export declare class OffscreenElement extends OffscreenNode {
    private [_style]?;
    private readonly [_attributes];
    /**
     * @private
     */
    readonly [ancestorDocument]: OffscreenDocument;
    readonly tagName: string;
    constructor(tagName: string, parentDocument: OffscreenDocument, elementUniqueId: number);
    get style(): OffscreenCSSStyleDeclaration;
    get id(): string;
    set id(value: string);
    get className(): string;
    setAttribute(qualifiedName: string, value: string): void;
    getAttribute(qualifiedName: string): string | null;
    removeAttribute(qualifiedName: string): void;
    append(...nodes: (OffscreenElement)[]): void;
    replaceWith(...nodes: (OffscreenElement)[]): void;
    getAttributeNames(): string[];
    remove(): void;
    insertBefore(newNode: OffscreenElement, refNode: OffscreenElement | null): OffscreenElement;
    removeChild(child: OffscreenElement | null): OffscreenElement;
    set innerHTML(text: string);
}
export {};
