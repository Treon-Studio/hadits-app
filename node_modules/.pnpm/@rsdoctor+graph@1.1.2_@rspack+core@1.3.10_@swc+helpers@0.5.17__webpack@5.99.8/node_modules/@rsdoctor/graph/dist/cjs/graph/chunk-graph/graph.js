"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var graph_exports = {};
__export(graph_exports, {
  ChunkGraph: () => ChunkGraph
});
module.exports = __toCommonJS(graph_exports);
class ChunkGraph {
  constructor() {
    this._assetMap = /* @__PURE__ */ new Map();
    this._assetPathMap = /* @__PURE__ */ new Map();
    this._chunkMap = /* @__PURE__ */ new Map();
    this._entrypointMap = /* @__PURE__ */ new Map();
  }
  getAssets() {
    return Array.from(this._assetMap.values());
  }
  getChunks() {
    return Array.from(this._chunkMap.values());
  }
  addAsset(...assets) {
    assets.forEach((asset) => {
      this._assetMap.set(asset.id, asset);
      this._assetPathMap.set(asset.path, asset);
    });
  }
  addChunk(...chunks) {
    chunks.forEach((chunk) => {
      this._chunkMap.set(chunk.id, chunk);
    });
  }
  getChunkById(id) {
    return this._chunkMap.get(id);
  }
  getAssetByPath(path) {
    return this._assetPathMap.get(path);
  }
  getAssetById(id) {
    return this._assetMap.get(id);
  }
  getEntryPoints() {
    return Array.from(this._entrypointMap.values());
  }
  getEntryPointById(id) {
    return this._entrypointMap.get(id);
  }
  addEntryPoint(...entrypoints) {
    entrypoints.forEach((entrypoint) => {
      this._entrypointMap.set(entrypoint.id, entrypoint);
    });
  }
  /** output the chunk graph data */
  toData(type) {
    return {
      assets: Array.from(this._assetMap.values()).map(
        (item) => item.toData(type)
      ),
      chunks: Array.from(this._chunkMap.values()).map((item) => item.toData()),
      entrypoints: Array.from(this._entrypointMap.values()).map(
        (item) => item.toData()
      )
    };
  }
  setChunks(chunks) {
    this._chunkMap = new Map(chunks.map((item) => [item.id, item]));
  }
  setEntrypoints(entrypoints) {
    this._entrypointMap = new Map(entrypoints.map((item) => [item.id, item]));
  }
  setAssets(assets) {
    this._assetMap = new Map(assets.map((item) => [item.id, item]));
    this._assetPathMap = new Map(assets.map((item) => [item.path, item]));
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ChunkGraph
});
