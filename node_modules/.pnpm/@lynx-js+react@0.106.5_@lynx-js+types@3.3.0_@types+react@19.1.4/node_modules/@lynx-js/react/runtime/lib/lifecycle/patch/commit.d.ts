import type { SnapshotPatch } from './snapshotPatch.js';
declare let globalFlushOptions: FlushOptions;
declare const globalCommitTaskMap: Map<number, () => void>;
declare let nextCommitTaskId: number;
declare let globalBackgroundSnapshotInstancesToRemove: number[];
interface Patch {
    id: number;
    snapshotPatch?: SnapshotPatch;
    workletRefInitValuePatch?: [id: number, value: unknown][];
}
interface PatchList {
    patchList: Patch[];
    flushOptions?: FlushOptions;
}
interface PatchOptions {
    pipelineOptions?: PipelineOptions;
    reloadVersion: number;
    isHydration?: boolean;
}
declare function replaceCommitHook(): void;
declare function commitToMainThread(): Promise<void>;
declare function commitPatchUpdate(patchList: PatchList, patchOptions: Omit<PatchOptions, 'reloadVersion'>): Promise<void>;
declare function genCommitTaskId(): number;
declare function replaceRequestAnimationFrame(): void;
export {};
