"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var rspack_exports = {};
__export(rspack_exports, {
  applyRspackNativePlugin: () => applyRspackNativePlugin
});
module.exports = __toCommonJS(rspack_exports);
var import_graph = require("@rsdoctor/graph");
var import_build = require("../../build-utils/build");
var import_constants = require("../constants");
var import_logger = require("@rsdoctor/utils/logger");
function applyRspackNativePlugin(compiler, plugin, RsdoctorRspackPlugin) {
  import_logger.logger.debug("[RspackNativePlugin] Apply hooks");
  compiler.hooks.compilation.tap("RsdoctorRspackPlugin", (compilation) => {
    const hooks = RsdoctorRspackPlugin.getCompilationHooks(
      compilation
    );
    const cached = {};
    const dependOn = {
      chunkGraphData: [],
      moduleGraphData: ["chunkGraphData"],
      assetPatchData: ["chunkGraphData"],
      moduleIdsPatchData: ["moduleGraphData"],
      moduleSourcesPatchData: ["moduleGraphData"]
    };
    const consumer = {
      chunkGraphData: (data) => {
        plugin.chunkGraph = new import_graph.ChunkGraph();
        import_build.Chunks.patchNativeChunkGraph(plugin.chunkGraph, data);
      },
      moduleGraphData: (data) => {
        import_build.ModuleGraph.patchNativeModuleGraph(
          plugin.modulesGraph,
          plugin.chunkGraph,
          data
        );
      },
      moduleIdsPatchData: (data) => {
        import_build.ModuleGraph.patchNativeModuleIds(plugin.modulesGraph, data);
      },
      moduleSourcesPatchData: (data) => {
        import_build.ModuleGraph.patchNativeModuleSources(
          plugin.modulesGraph,
          data
        );
      },
      assetPatchData: (data) => {
        import_build.Chunks.patchNativeAssets(plugin.chunkGraph, data);
      }
    };
    const tryConsumeData = (key, data) => {
      if (cached[key] === true)
        return;
      cached[key] = data;
      while (true) {
        let hasConsumed = false;
        for (const [_task, deps] of Object.entries(dependOn)) {
          const task = _task;
          if (cached[task] === true || cached[task] === void 0) {
            continue;
          }
          const prepared = deps.every(
            (dep) => cached[dep] === true
          );
          if (!prepared)
            continue;
          consumer[task](
            cached[task]
          );
          cached[task] = true;
          hasConsumed = true;
        }
        if (!hasConsumed)
          break;
      }
    };
    hooks.chunkGraph.tap(
      (0, import_constants.internalPluginTapPreOptions)("nativeChunkGraph"),
      (rawChunkGraph) => {
        import_logger.logger.debug("[RspackNativePlugin] Called chunkGraph hook");
        tryConsumeData("chunkGraphData", rawChunkGraph);
      }
    );
    hooks.moduleGraph.tap(
      (0, import_constants.internalPluginTapPreOptions)("nativeModuleGraph"),
      (rawModuleGraph) => {
        import_logger.logger.debug("[RspackNativePlugin] Called moduleGraph hook");
        tryConsumeData("moduleGraphData", rawModuleGraph);
      }
    );
    hooks.moduleIds.tap(
      (0, import_constants.internalPluginTapPreOptions)("nativeSourcePatch"),
      (rawModuleIdsPatch) => {
        import_logger.logger.debug("[RspackNativePlugin] Called moduleIds hook");
        tryConsumeData("moduleIdsPatchData", rawModuleIdsPatch);
      }
    );
    hooks.moduleSources.tap(
      (0, import_constants.internalPluginTapPreOptions)("nativeModuleSourcesPatch"),
      (rawModuleSourcesPatch) => {
        import_logger.logger.debug("[RspackNativePlugin] Called moduleSources hook");
        tryConsumeData("moduleSourcesPatchData", rawModuleSourcesPatch);
      }
    );
    hooks.assets.tap(
      (0, import_constants.internalPluginTapPreOptions)("nativeAssetPatch"),
      (rawAssetPatch) => {
        import_logger.logger.debug("[RspackNativePlugin] Called assets hook");
        tryConsumeData("assetPatchData", rawAssetPatch);
      }
    );
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  applyRspackNativePlugin
});
