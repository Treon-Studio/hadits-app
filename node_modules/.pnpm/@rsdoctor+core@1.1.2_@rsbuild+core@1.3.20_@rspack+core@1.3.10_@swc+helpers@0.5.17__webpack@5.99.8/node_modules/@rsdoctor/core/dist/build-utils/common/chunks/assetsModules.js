"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var assetsModules_exports = {};
__export(assetsModules_exports, {
  getAssetsModulesData: () => getAssetsModulesData,
  transformAssetsModulesData: () => transformAssetsModulesData
});
module.exports = __toCommonJS(assetsModules_exports);
var import_path = __toESM(require("path"));
var import_logger = require("@rsdoctor/utils/logger");
var import_common = require("@rsdoctor/utils/common");
async function getAssetsModulesData(moduleGraph, chunkGraph, bundleDir, opts) {
  const { parseBundle = () => ({}) } = opts || {};
  const assets = chunkGraph.getAssets();
  const modules = moduleGraph.getModules();
  let bundlesSources = null;
  let parsedModules = null;
  if (bundleDir && assets.length) {
    bundlesSources = {};
    parsedModules = {};
    for (const asset of assets) {
      const assetFile = import_path.default.join(bundleDir, asset.path);
      let bundleInfo;
      try {
        bundleInfo = parseBundle(assetFile, modules);
      } catch (err) {
        const { code = "", message } = err;
        const msg = code === "ENOENT" ? "no such file" : message;
        process.env.DEVTOOLS_NODE_DEV === "1" && import_logger.logger.warn(`Error parsing bundle asset "${assetFile}": ${msg}`);
        continue;
      }
      bundlesSources[asset.path] = import_common.Lodash.pick(bundleInfo, [
        "src",
        "runtimeSrc"
      ]);
      Object.assign(parsedModules, bundleInfo?.modules || {});
    }
    if (import_common.Lodash.isEmpty(bundlesSources)) {
      bundlesSources = null;
      parsedModules = null;
      process.env.DEVTOOLS_DEV && import_logger.logger.warn(
        "\nNo bundles were parsed. Analyzer will show only original module sizes from stats file.\n"
      );
    }
  }
  return parsedModules;
}
function transformAssetsModulesData(parsedModulesData, moduleGraph) {
  if (!moduleGraph)
    return;
  Object.entries(parsedModulesData).forEach(([moduleId, parsedData]) => {
    const module2 = moduleGraph.getModuleByWebpackId(moduleId ?? "");
    module2?.setSize({
      parsedSize: parsedData?.size
    });
    module2?.setSource({ parsedSource: parsedData?.content || "" });
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getAssetsModulesData,
  transformAssetsModulesData
});
