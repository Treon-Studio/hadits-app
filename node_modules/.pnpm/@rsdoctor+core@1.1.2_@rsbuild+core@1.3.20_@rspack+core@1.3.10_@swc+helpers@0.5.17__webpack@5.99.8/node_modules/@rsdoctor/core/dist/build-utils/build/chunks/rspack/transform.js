"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var transform_exports = {};
__export(transform_exports, {
  patchNativeAssets: () => patchNativeAssets,
  patchNativeChunkGraph: () => patchNativeChunkGraph
});
module.exports = __toCommonJS(transform_exports);
var import_graph = require("@rsdoctor/graph");
function patchNativeChunkGraph(cg, rawChunkGraph) {
  const { chunks: rawChunks, entrypoints: rawEntrypoints } = rawChunkGraph;
  const chunks = rawChunks.map(
    (chunk) => new import_graph.Chunk(
      chunk.ukey.toString(),
      chunk.name,
      0,
      chunk.initial,
      chunk.entry
    )
  );
  cg.setChunks(chunks);
  const entrypoints = rawEntrypoints.map((entrypoint) => {
    const res = new import_graph.EntryPoint(entrypoint.name);
    res.setId(entrypoint.ukey);
    return res;
  });
  cg.setEntrypoints(entrypoints);
  for (const rawChunk of rawChunks) {
    const chunk = cg.getChunkById(rawChunk.ukey.toString());
    chunk.setDependencies(
      rawChunk.dependencies.map((ukey) => cg.getChunkById(ukey.toString()))
    );
    chunk.setImported(
      rawChunk.imported.map((ukey) => cg.getChunkById(ukey.toString()))
    );
  }
  for (const rawEntrypoint of rawEntrypoints) {
    const entrypoint = cg.getEntryPointById(rawEntrypoint.ukey);
    entrypoint.setChunks(
      rawEntrypoint.chunks.map((ukey) => cg.getChunkById(ukey.toString()))
    );
  }
}
function patchNativeAssets(cg, rawAssetPatch) {
  const {
    assets: rawAssets,
    chunkAssets: rawChunkAssets,
    entrypointAssets: rawEntrypointAssets
  } = rawAssetPatch;
  const assets = rawAssets.map((asset) => {
    const res = new import_graph.Asset(asset.path, asset.size, [], "");
    res.setId(asset.ukey);
    return res;
  });
  cg.setAssets(assets);
  for (const rawAsset of rawAssets) {
    const asset = cg.getAssetById(rawAsset.ukey);
    asset.setChunks(
      rawAsset.chunks.map((ukey) => cg.getChunkById(ukey.toString()))
    );
  }
  for (const rawChunkAsset of rawChunkAssets) {
    const chunk = cg.getChunkById(rawChunkAsset.chunk.toString());
    chunk.setAssets(rawChunkAsset.assets.map((ukey) => cg.getAssetById(ukey)));
  }
  for (const rawEntrypointAsset of rawEntrypointAssets) {
    const entrypoint = cg.getEntryPointById(rawEntrypointAsset.entrypoint);
    entrypoint.setAssets(
      rawEntrypointAsset.assets.map((ukey) => cg.getAssetById(ukey))
    );
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  patchNativeAssets,
  patchNativeChunkGraph
});
