"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var transform_exports = {};
__export(transform_exports, {
  patchNativeModuleGraph: () => patchNativeModuleGraph,
  patchNativeModuleIds: () => patchNativeModuleIds,
  patchNativeModuleSources: () => patchNativeModuleSources
});
module.exports = __toCommonJS(transform_exports);
var import_graph = require("@rsdoctor/graph");
var import_types = require("@rsdoctor/types");
const createDependencyKind = (type) => {
  if (type.includes("harmony")) {
    return import_types.SDK.DependencyKind.ImportStatement;
  }
  if (type.includes("cjs")) {
    return import_types.SDK.DependencyKind.RequireCall;
  }
  if (type.includes("import()")) {
    return import_types.SDK.DependencyKind.DynamicImport;
  }
  if (type.includes("amd")) {
    return import_types.SDK.DependencyKind.AMDRequire;
  }
  return import_types.SDK.DependencyKind.Unknown;
};
function patchNativeModuleGraph(mg, cg, rawModuleGraph) {
  const {
    modules: rawModules,
    dependencies: rawDependencies,
    chunkModules: rawChunkModules
  } = rawModuleGraph;
  const modules = rawModules.map((module2) => {
    const res = new import_graph.Module(
      module2.identifier,
      module2.path,
      module2.isEntry,
      module2.kind === "concatenated" ? import_types.SDK.ModuleKind.Concatenation : import_types.SDK.ModuleKind.Normal,
      void 0,
      module2.layer
    );
    res.setId(module2.ukey);
    return res;
  });
  mg.setModules(modules);
  for (const rawModule of rawModules) {
    const module2 = mg.getModuleById(rawModule.ukey);
    if (module2) {
      module2.setImported(
        rawModule.imported.map((ukey) => mg.getModuleById(ukey)).filter(Boolean)
      );
    }
  }
  for (const rawModule of rawModules) {
    const module2 = mg.getModuleById(rawModule.ukey);
    module2.setModules(
      rawModule.modules.map((ukey) => mg.getModuleById(ukey)).filter(Boolean)
    );
  }
  for (const rawModule of rawModules) {
    const module2 = mg.getModuleById(rawModule.ukey);
    if (module2) {
      module2.setConcatenationModules(
        rawModule.belongModules.map((ukey) => mg.getModuleById(ukey)).filter(Boolean)
      );
    }
  }
  for (const rawModule of rawModules) {
    const module2 = mg.getModuleById(rawModule.ukey);
    if (module2) {
      module2.setChunks(
        rawModule.chunks.map((ukey) => cg.getChunkById(ukey.toString())).filter(Boolean)
      );
    }
  }
  for (const rawChunkModule of rawChunkModules) {
    const chunk = cg.getChunkById(rawChunkModule.chunk.toString());
    if (chunk) {
      chunk.setModules(
        rawChunkModule.modules.map((ukey) => mg.getModuleById(ukey)).filter(Boolean)
      );
    }
  }
  const deppendencies = rawDependencies.map((dep) => {
    const res = new import_graph.Dependency(
      dep.request,
      mg.getModuleById(dep.module),
      mg.getModuleById(dep.dependency),
      createDependencyKind(dep.kind)
    );
    res.setId(dep.ukey);
    return res;
  });
  mg.setDependencies(deppendencies);
  for (const rawModule of rawModules) {
    const module2 = mg.getModuleById(rawModule.ukey);
    module2.setDependencies(
      rawModule.dependencies.map((ukey) => mg.getDependencyById(ukey)).filter(Boolean)
    );
  }
}
function patchNativeModuleIds(mg, rawModuleIdsPatch) {
  const { moduleIds: rawModuleIds } = rawModuleIdsPatch;
  for (const rawModuleId of rawModuleIds) {
    const module2 = mg.getModuleById(rawModuleId.module);
    if (module2) {
      module2.setRenderId(rawModuleId.renderId);
    }
  }
}
function patchNativeModuleSources(mg, rawModuleSourcesPatch) {
  const { moduleOriginalSources: rawModuleOriginalSources } = rawModuleSourcesPatch;
  for (const rawModuleOriginalSource of rawModuleOriginalSources) {
    const module2 = mg.getModuleById(rawModuleOriginalSource.module);
    if (module2) {
      module2.setSource({
        source: rawModuleOriginalSource.source
      });
      module2.setSize({
        sourceSize: rawModuleOriginalSource.size
      });
    }
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  patchNativeModuleGraph,
  patchNativeModuleIds,
  patchNativeModuleSources
});
