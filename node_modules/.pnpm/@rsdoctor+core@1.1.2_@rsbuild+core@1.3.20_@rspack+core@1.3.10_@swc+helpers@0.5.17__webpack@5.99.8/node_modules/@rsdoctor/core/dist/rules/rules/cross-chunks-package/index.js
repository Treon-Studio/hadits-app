"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var cross_chunks_package_exports = {};
__export(cross_chunks_package_exports, {
  rule: () => rule
});
module.exports = __toCommonJS(cross_chunks_package_exports);
var import_types = require("@rsdoctor/types");
var import_rule = require("../../rule");
var import_utils = require("./utils");
var import_lodash = require("lodash");
const title = "cross-chunks-package";
const rule = (0, import_rule.defineRule)(() => {
  return {
    meta: {
      code: "E1002",
      title,
      category: "bundle",
      severity: import_types.Linter.Severity.Warn,
      defaultConfig: {
        ignore: []
      }
    },
    check({ packageGraph, report }) {
      const packages = packageGraph.getPackages().filter((pkg) => pkg.duplicates.length > 0);
      for (const pkg of packages) {
        const detail = {
          type: title,
          chunks: pkg.duplicates,
          package: {
            name: pkg.name,
            id: pkg.id,
            size: pkg.getSize(),
            version: pkg.version
          }
        };
        const chunks = [];
        pkg.duplicates.forEach(
          (dup) => chunks.push(...dup.chunks.map((ck) => ck.name))
        );
        const message = (0, import_utils.getErrorMsgForDupPckChunks)((0, import_lodash.uniq)(chunks), pkg.name);
        report({
          message,
          detail
        });
      }
    }
  };
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  rule
});
