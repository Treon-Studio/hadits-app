"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ecma_version_check_exports = {};
__export(ecma_version_check_exports, {
  rule: () => rule
});
module.exports = __toCommonJS(ecma_version_check_exports);
var import_path = __toESM(require("path"));
var import_plugin_check_syntax = require("@rsbuild/plugin-check-syntax");
var import_browserslist_load_config = require("browserslist-load-config");
var import_rule = require("../../rule");
var import_types2 = require("@rsdoctor/types");
const title = "ecma-version-check";
const rule = (0, import_rule.defineRule)(() => {
  return {
    meta: {
      code: "E1004",
      title,
      category: "bundle",
      severity: import_types2.Linter.Severity.Warn,
      defaultConfig: {
        ecmaVersion: void 0,
        targets: []
      }
    },
    async check({ chunkGraph, report, ruleConfig, root, configs }) {
      for (const asset of chunkGraph.getAssets()) {
        if (import_path.default.extname(asset.path) !== ".js") {
          continue;
        }
        const browserslistConfig = (0, import_browserslist_load_config.loadConfig)({
          path: root,
          env: "production"
        });
        const { exclude, excludeOutput, targets, ecmaVersion } = ruleConfig;
        const finalTargets = targets || browserslistConfig || [];
        if (!finalTargets.length && !ecmaVersion) {
          return;
        }
        const buildConfig = configs[0]?.config;
        const context = buildConfig?.context || root;
        const checkSyntax = new import_plugin_check_syntax.CheckSyntax({
          exclude,
          excludeOutput,
          ecmaVersion,
          rootPath: context,
          targets: finalTargets
        });
        const outputDir = buildConfig?.output?.path || import_path.default.resolve(root, "dist");
        const assetPath = import_path.default.resolve(outputDir, asset.path);
        await checkSyntax.check(assetPath, asset.content);
        checkSyntax.errors.forEach((err) => {
          report({
            message: `Find some syntax that does not match "ecmaVersion <= ${checkSyntax.ecmaVersion}"`,
            detail: {
              error: err,
              type: "link"
            }
          });
        });
      }
    }
  };
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  rule
});
