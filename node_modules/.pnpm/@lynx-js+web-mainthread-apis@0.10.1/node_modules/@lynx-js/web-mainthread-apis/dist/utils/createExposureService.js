// Copyright 2023 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
import { lynxUniqueIdAttribute, } from '@lynx-js/web-constants';
import { createCrossThreadEvent } from './createCrossThreadEvent.js';
export function createExposureService(runtime) {
    const postExposure = runtime.config.callbacks.postExposure;
    let working = true;
    let exposureCache = [];
    let disexposureCache = [];
    const onScreen = new Map();
    function exposureEventHandler(ev) {
        const exposureEvent = createCrossThreadEvent(runtime, ev, ev.type);
        exposureEvent.detail['unique-id'] = parseFloat(ev.target.getAttribute(lynxUniqueIdAttribute));
        const exposureID = exposureEvent.detail.exposureID;
        if (ev.type === 'exposure') {
            exposureCache.push(exposureEvent);
            onScreen.set(exposureID, exposureEvent);
        }
        else {
            disexposureCache.push(exposureEvent);
            onScreen.delete(exposureID);
        }
    }
    setInterval(() => {
        if (exposureCache.length > 0 || disexposureCache.length > 0) {
            const currentExposure = exposureCache;
            const currentDisexposure = disexposureCache;
            exposureCache = [];
            disexposureCache = [];
            postExposure({
                exposures: currentExposure,
                disExposures: currentDisexposure,
            });
        }
    }, 1000 / 20);
    runtime._rootDom.addEventListener('exposure', exposureEventHandler, {
        passive: true,
    });
    runtime._rootDom.addEventListener('disexposure', exposureEventHandler, {
        passive: true,
    });
    function switchExposureService(enable, sendEvent) {
        if (enable && !working) {
            // send all onScreen info
            postExposure({
                exposures: [...onScreen.values()],
                disExposures: [],
            });
        }
        else if (!enable && working) {
            if (sendEvent) {
                postExposure({
                    exposures: [],
                    disExposures: [...onScreen.values()],
                });
            }
        }
        working = enable;
    }
    return { switchExposureService };
}
//# sourceMappingURL=createExposureService.js.map