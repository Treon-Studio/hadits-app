import { MainThreadRuntime, } from './MainThreadRuntime.js';
export function createMainThreadLynx(config, lepusRuntime) {
    return {
        requestAnimationFrame(cb) {
            return requestAnimationFrame(cb);
        },
        cancelAnimationFrame(handler) {
            return cancelAnimationFrame(handler);
        },
        __globalProps: config.globalProps,
        requireModule(path) {
            // @ts-expect-error
            if (self.WorkerGlobalScope) {
                const mainfestUrl = config.lepusCode[`/${path}`];
                if (mainfestUrl)
                    path = mainfestUrl;
                // @ts-expect-error
                importScripts(path);
                const entry = globalThis.module.exports;
                return entry?.(lepusRuntime);
            }
            else {
                throw new Error('importing scripts synchronously is only available for the multi-thread running mode');
            }
        },
        requireModuleAsync(path, callback) {
            const mainfestUrl = config.lepusCode[`/${path}`];
            if (mainfestUrl)
                path = mainfestUrl;
            import(
            /* webpackIgnore: true */
            path).catch(callback).then(() => {
                const entry = globalThis.module.exports;
                const ret = entry?.(lepusRuntime);
                callback(null, ret);
            });
        },
        getCustomSectionSync(key) {
            return config.customSections[key]?.content;
        },
        markPipelineTiming: config.callbacks.markTiming,
    };
}
//# sourceMappingURL=MainThreadLynx.js.map