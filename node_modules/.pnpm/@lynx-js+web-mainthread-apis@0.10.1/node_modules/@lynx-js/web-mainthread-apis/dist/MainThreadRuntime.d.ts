import { type LynxTemplate, type PageConfig, type ProcessDataCallback, type StyleInfo, type FlushElementTreeOptions, type Cloneable, type BrowserConfig, type publishEventEndpoint, type publicComponentEventEndpoint, type reportErrorEndpoint, type onLifecycleEventEndpoint, type RpcCallType, type postExposureEndpoint } from '@lynx-js/web-constants';
import { type MainThreadLynx } from './MainThreadLynx.js';
import type { LynxRuntimeInfo } from './elementAPI/ElementThreadElement.js';
export interface MainThreadRuntimeCallbacks {
    mainChunkReady: () => void;
    flushElementTree: (options: FlushElementTreeOptions, timingFlags: string[]) => void;
    _ReportError: RpcCallType<typeof reportErrorEndpoint>;
    __OnLifecycleEvent: RpcCallType<typeof onLifecycleEventEndpoint>;
    markTiming: (pipelineId: string, timingKey: string) => void;
    publishEvent: RpcCallType<typeof publishEventEndpoint>;
    publicComponentEvent: RpcCallType<typeof publicComponentEventEndpoint>;
    postExposure: RpcCallType<typeof postExposureEndpoint>;
}
export interface MainThreadConfig {
    pageConfig: PageConfig;
    globalProps: unknown;
    callbacks: MainThreadRuntimeCallbacks;
    styleInfo: StyleInfo;
    customSections: LynxTemplate['customSections'];
    lepusCode: LynxTemplate['lepusCode'];
    browserConfig: BrowserConfig;
    tagMap: Record<string, string>;
    docu: Pick<Document, 'append' | 'createElement' | 'addEventListener'>;
}
export declare const elementToRuntimeInfoMap: unique symbol;
export declare const getElementByUniqueId: unique symbol;
export declare const updateCSSInJsStyle: unique symbol;
export declare const lynxUniqueIdToElement: unique symbol;
export declare const switchExposureService: unique symbol;
export declare class MainThreadRuntime {
    #private;
    config: MainThreadConfig;
    /**
     * @private
     */
    [lynxUniqueIdToElement]: WeakRef<HTMLElement>[];
    /**
     * @private
     */
    [switchExposureService]: (enable: boolean, sendEvent: boolean) => void;
    /**
     * @private
     */
    private _lynxUniqueIdToStyleSheet;
    /**
     * @private
     */
    _page?: HTMLElement;
    /**
     * @private the CreatePage will append it to this
     */
    _rootDom: Pick<Element, 'append' | 'addEventListener'>;
    /**
     * @private
     */
    _timingFlags: string[];
    /**
     * @private
     */
    [elementToRuntimeInfoMap]: WeakMap<HTMLElement, LynxRuntimeInfo>;
    constructor(config: MainThreadConfig);
    /**
     * @private
     */
    [getElementByUniqueId](uniqueId: number): HTMLElement | undefined;
    [updateCSSInJsStyle](uniqueId: number, newStyles: string): void;
    /**
     * @private
     */
    __lynxGlobalBindingValues: Record<string, any>;
    get globalThis(): this;
    lynx: MainThreadLynx;
    __globalProps: unknown;
    processData?: ProcessDataCallback;
    renderPage: (data: unknown) => void;
    _ReportError: RpcCallType<typeof reportErrorEndpoint>;
    __OnLifecycleEvent: RpcCallType<typeof onLifecycleEventEndpoint>;
    __LoadLepusChunk: (path: string) => boolean;
    __FlushElementTree: (_subTree: unknown, options: FlushElementTreeOptions) => void;
    updatePage?: (data: Cloneable, options?: Record<string, string>) => void;
    _updateVars?: () => void;
}
