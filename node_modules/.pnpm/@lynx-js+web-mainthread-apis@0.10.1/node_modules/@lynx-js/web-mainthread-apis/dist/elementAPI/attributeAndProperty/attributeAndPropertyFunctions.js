// Copyright 2023 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
import { __lynx_timing_flag, componentIdAttribute, lynxTagAttribute, } from '@lynx-js/web-constants';
import {} from '../ElementThreadElement.js';
import { elementToRuntimeInfoMap, } from '../../MainThreadRuntime.js';
function setDatasetAttribute(element, key, value) {
    if (value !== null && value !== undefined) {
        if (typeof value === 'object') {
            element.setAttribute('data-' + key, JSON.stringify(value));
        }
        else {
            element.setAttribute('data-' + key, value.toString());
        }
    }
}
export function createAttributeAndPropertyFunctions(runtime) {
    function __AddConfig(element, type, value) {
        runtime[elementToRuntimeInfoMap].get(element).componentConfig[type] =
            value;
    }
    function __AddDataset(element, key, value) {
        runtime[elementToRuntimeInfoMap].get(element).lynxDataset[key] = value;
        setDatasetAttribute(element, key, value);
    }
    function __GetAttributes(element) {
        return Object.fromEntries(element.getAttributeNames().map((attributeName) => [attributeName, element.getAttribute(attributeName)]));
    }
    function __GetComponentID(element) {
        return element.getAttribute(componentIdAttribute);
    }
    function __GetDataByKey(element, key) {
        return runtime[elementToRuntimeInfoMap].get(element).lynxDataset[key];
    }
    function __GetDataset(element) {
        return runtime[elementToRuntimeInfoMap].get(element).lynxDataset;
    }
    function __GetElementConfig(element) {
        return runtime[elementToRuntimeInfoMap].get(element).componentConfig;
    }
    function __GetElementUniqueID(element) {
        return runtime[elementToRuntimeInfoMap].get(element)?.uniqueId ?? -1;
    }
    function __GetID(element) {
        return element.id;
    }
    function __GetTag(element) {
        return element.getAttribute(lynxTagAttribute);
    }
    function __SetConfig(element, config) {
        runtime[elementToRuntimeInfoMap].get(element).componentConfig = config;
    }
    function __SetDataset(element, dataset) {
        runtime[elementToRuntimeInfoMap].get(element).lynxDataset = dataset;
        for (const [key, value] of Object.entries(dataset)) {
            setDatasetAttribute(element, key, value);
        }
    }
    function __SetID(element, id) {
        element.id = id;
    }
    function __UpdateComponentID(element, componentID) {
        element.setAttribute(componentIdAttribute, componentID);
    }
    function __GetConfig(element) {
        return runtime[elementToRuntimeInfoMap].get(element).componentConfig;
    }
    function __UpdateListCallbacks(element, componentAtIndex, enqueueComponent) {
        runtime[elementToRuntimeInfoMap].get(element).componentAtIndex =
            componentAtIndex;
        runtime[elementToRuntimeInfoMap].get(element).enqueueComponent =
            enqueueComponent;
    }
    function __SetAttribute(element, key, value) {
        if (value === null || value === undefined) {
            element.removeAttribute(key);
        }
        else {
            if (__GetTag(element) === 'list' && key === 'update-list-info') {
                const listInfo = value;
                const { insertAction, removeAction } = listInfo;
                queueMicrotask(() => {
                    const runtimeInfo = runtime[elementToRuntimeInfoMap].get(element);
                    const componentAtIndex = runtimeInfo.componentAtIndex;
                    const enqueueComponent = runtimeInfo.enqueueComponent;
                    for (const action of insertAction) {
                        componentAtIndex?.(element, runtimeInfo.uniqueId, action.position, 0, false);
                    }
                    for (const action of removeAction) {
                        enqueueComponent?.(element, runtimeInfo.uniqueId, action.position);
                    }
                });
            }
            else {
                element.setAttribute(key, value.toString());
            }
        }
        if (key === __lynx_timing_flag && value) {
            runtime._timingFlags.push(value);
        }
    }
    return {
        __AddConfig,
        __AddDataset,
        __GetAttributes,
        __GetComponentID,
        __GetDataByKey,
        __GetDataset,
        __GetElementConfig,
        __GetElementUniqueID,
        __GetID,
        __GetTag,
        __SetConfig,
        __SetDataset,
        __SetID,
        __UpdateComponentID,
        __UpdateListCallbacks,
        __GetConfig,
        __SetAttribute,
    };
}
//# sourceMappingURL=attributeAndPropertyFunctions.js.map